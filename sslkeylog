#!/usr/bin/env python3
from frida_tools.application import ConsoleApplication

from pyasn1.codec.der import decoder


class Application(ConsoleApplication):

    SESSION_ID_LENGTH = 32
    MASTER_KEY_LENGTH = 48

    def _add_options(self, parser):
        parser.add_option("-o", "--output", help="SSL keylog file to write")

    def _initialize(self, parser, options, args):
        self._file = open(options.output, "a")

    def _usage(self):
        return "usage: %prog [options] target"

    def _needs_target(self):
        return True

    def _write(self, text):
        self._file.write(text)
        self._file.flush()

    def _start(self):
        self._update_status("Attached")

        def on_message(message, data):
            self._reactor.schedule(lambda: self._on_message(message, data))

        self._script = self._session.create_script(self._script())
        self._script.on("message", on_message)

        self._update_status("Loading script...")
        self._script.load()
        self._update_status("Loaded script")

    def _on_message(self, message, data):
        if message["type"] == "send":
            if message["payload"] == "session":
                self._on_session(data)
                return

        print(message)

    def _on_session(self, data):
        asn1Sequence, _ = decoder.decode(data)

        session_id = asn1Sequence[3].asOctets()
        master_key = asn1Sequence[4].asOctets()

        self._keylog(session_id, master_key)

    def _keylog(self, session_id, master_key):
        if len(session_id) != self.SESSION_ID_LENGTH:
            self._log("warning", "Session ID length is {}".format(len(session_id)))
            return

        if len(master_key) != self.MASTER_KEY_LENGTH:
            self._log("warning", "Master Key length is {}".format(len(master_key)))
            return

        self._write(self._keylog_str(session_id, master_key) + "\n")

    @staticmethod
    def _keylog_str(session_id, master_key):
        return "RSA Session-ID:{} Master-Key:{}".format(
            session_id.hex(),
            master_key.hex(),
        )

    @staticmethod
    def _script():
        return """"use strict"

function allocPointer(value) {
    const address = Memory.alloc(Process.pointerSize);

    Memory.writePointer(address, value);

    return address;
}

function queryPrefixFromMatch(match) {
    const name = match.name;

    const delimiterIndex = name.indexOf("!");
    const moduleQuery = name.substring(0, delimiterIndex + 1);

    return "exports:" + moduleQuery;
}

const resolver = new ApiResolver("module");

resolver.enumerateMatches("exports:*!SSL_connect", {
    onMatch: function (match) {
        const queryPrefix = queryPrefixFromMatch(match);

        function resolveExport(name) {
            const matches = resolver.enumerateMatchesSync(queryPrefix + name);

            if (matches.length == 0) {
                return null;
            }

            return matches[0].address;
        }

        function resolveFunction(name, returnType, argTypes) {
            const address = resolveExport(name);

            return new NativeFunction(address, returnType, argTypes);
        }

        const SSL_get_session = resolveFunction(
            "SSL_get_session", "pointer", ["pointer"]
        );

        const i2d_SSL_SESSION = resolveFunction(
            "i2d_SSL_SESSION", "int", ["pointer", "pointer"]
        );

        function encodeSSLSession(session) {
            const length = i2d_SSL_SESSION(session, NULL);
            const address = Memory.alloc(length);

            i2d_SSL_SESSION(session, allocPointer(address));

            return Memory.readByteArray(address, length);
        };

        const addressCache = {};

        function cacheGuard(address) {
            if (address in addressCache) {
                return false;
            }

            addressCache[address] = null;
            return true;
        }

        function cacheDrop(address) {
            delete addressCache[address];
        }

        function handleSSL(ssl) {
            if (cacheGuard(ssl)) {
                const session = SSL_get_session(ssl);
                send("session", encodeSSLSession(session));
            }
        }

        Interceptor.attach(match.address, {
            onEnter: function (args) {
                this.ssl = args[0];
                cacheDrop(this.ssl);
            },

            onLeave: function (retvalue) {
                cacheDrop(this.ssl);
                handleSSL(this.ssl);
            },
        });

        function attachSSLExport(name) {
            Interceptor.attach(resolveExport(name), {
                onEnter: function (args) {
                    const ssl = args[0];
                    handleSSL(ssl);
                }
            });
        }

        attachSSLExport("SSL_read");
        attachSSLExport("SSL_write");
    },

    onComplete: function() {}
});
"""


def main():
    app = Application()
    app.run()


if __name__ == "__main__":
    main()
